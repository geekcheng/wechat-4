# **************************************************************
# ----- log4j日志输入配置相关说明 -----
# **************************************************************

#%p 输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL   
#%r 输出自应用启动到输出该log信息耗费的毫秒数   
#%c 输出所属的类目，通常就是所在类的全名   
#%t 输出产生该日志事件的线程名  
#%m 输出代码中指定的信息   
#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”   
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921 

#log4j提供4种布局:   
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）  
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息  

  
#log4j中有五级logger 输出级别:  
#FATAL 0   
#ERROR 3   
#WARN 4   
#INFO 6   
#DEBUG 7 

# **************************************************************
# ----- log4j日志输入配置 -----
# **************************************************************

### 设置日志级别 ###
log4j.rootLogger=INFO,Console,logfile

### 输出到console端  ###
#设置stdout的日志输出控制台 
log4j.appender.Console=org.apache.log4j.ConsoleAppender  
##输出日志到控制台的方式,默认为System.out 
#log4j.appender.Console.Target =System.out
log4j.appender.Console.layout=org.apache.log4j.PatternLayout  
log4j.appender.Console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

### 日志输出(每天产生一个日志文件) ###
#设置other的日志输出控制台 
log4j.appender.logfile = org.apache.log4j.DailyRollingFileAppender    
#设置输出日志文件
log4j.appender.logfile.File = D://logs/log.log    
log4j.appender.logfile.Append = true    
#日志输出级别  logfile
log4j.appender.logfile.Threshold = INFO     
log4j.appender.logfile.layout = org.apache.log4j.PatternLayout    
log4j.appender.logfile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n   

###  定义sql语句的输出级别 ### 
log4j.logger.java.sql.Connection=INFO
log4j.logger.java.sql.ResultSet=INFO
log4j.logger.org.apache=INFO
log4j.logger.java.sql.Statement=INFO
log4j.logger.java.sql.PreparedStatement=INFO

